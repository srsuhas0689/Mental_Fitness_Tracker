# -*- coding: utf-8 -*-
"""AI Mental Fitness Tracker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gZK4OewbwaTeGPDzw0fduhY8ctPbvZYv

Importing Required Libraries
"""

import warnings
warnings.filterwarnings('ignore')

import numpy as np
import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

"""Exploratory Data Analysis

Load and Prepare Data
"""

df1 = pd.read_csv("/content/drive/MyDrive/MFT/mental-and-substance-use-as-share-of-disease.csv")
df2 = pd.read_csv("/content/drive/MyDrive/MFT/prevalence-by-mental-and-substance-use-disorder.csv")

df1.head()

df2.head(10)

data = pd.merge(df1,df2)
data.head(10)

"""Data Cleaning"""

data.isnull().sum()

data.drop('Code',axis=1,inplace=True)

data.head(10)

data.size,data.shape

data.set_axis(['Country','Year','Scizophrenia','Bipolar_disorder','Eating_disorder','Anxiety','drug_usage','depression','alcohol','mental_fitness'],axis='columns',inplace=True)

data.head(10)

"""Visualization"""

plt.figure(figsize=(12,6))
sns.heatmap(data.corr(),annot=True,cmap='Blues')
plt.plot()

"""**Take** **Away** **Points**

Eating disorder is a positively correlated to mental fitness and vice versa as our eating choice affect our mental health
"""

sns.pairplot(data,corner=True)
plt.show()

mean = data['mental_fitness'].mean()
mean

fig = px.pie(data, values='mental_fitness', names='Year')
fig.show()

fig = px.line(data, x='Year', y='mental_fitness', color ='Country', markers=True, color_discrete_sequence = ['red','blue'], template = 'plotly_dark')
fig.show()

df1.info()

df2.info()

from sklearn.preprocessing import LabelEncoder
l=LabelEncoder()
for i in df1.columns:
  if df1[i].dtype == 'object':
    df1[i]=l.fit_transform(df1[i])

from sklearn.preprocessing import LabelEncoder
l=LabelEncoder()
for i in df2.columns:
  if df2[i].dtype == 'object':
    df2[i]=l.fit_transform(df2[i])

df1.shape

df2.shape

import pandas as pd
from sklearn.model_selection import train_test_split

# Define your data and column names
data = {
    'column1': [10, 20, 30, ...],  # Replace with actual values
    'column2': [0.5, 0.3, 0.8, ...],  # Replace with actual values
    'mental_fitness': [1, 0, 1, ...],  # Replace with actual values
    # Add more columns as needed
}

# Create the DataFrame
df = pd.DataFrame(data)

# Continue with your code using the DataFrame 'df'
x = df.drop('mental_fitness', axis=1)
y = df['mental_fitness']
xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.2, random_state=2)

print("xtrain :",xtrain.shape)
print("xtest :",xtest.shape)
print("\nytrain :",ytrain.shape)
print("ytest :",ytest.shape)

import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Example values for xtrain
xtrain = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Example values for ytrain
ytrain = np.array([10, 20, 30])

# Reshape ytrain to a 2-dimensional array if needed
ytrain = ytrain.reshape(-1, 1)

lr = LinearRegression()
lr.fit(xtrain, ytrain)
ytrain_pred = lr.predict(xtrain)
mse = mean_squared_error(ytrain, ytrain_pred)
rmse = np.sqrt(mse)
r2 = r2_score(ytrain, ytrain_pred)

print('The Linear Regression model performance for the training set')
print('--------------------------------------------------------')
print('MSE is {}'.format(mse))
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))

from sklearn.ensemble import RandomForestRegressor
rf = RandomForestRegressor()
rf.fit(xtrain,ytrain)

ytrain_pred = rf.predict(xtrain)
mse = mean_squared_error(ytrain, ytrain_pred)
rmse = np.sqrt(mse)
r2 = r2_score(ytrain, ytrain_pred)

print('The RandomForestRegressor model performance for the training set')
print('--------------------------------------------------------')
print('MSE is {}'.format(mse))
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))

"""Evaluation"""

import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
xtrain = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
ytrain = np.array([10, 20, 30])
ytrain = ytrain.reshape(-1, 1)

lr = LinearRegression()
lr.fit(xtrain, ytrain)
ytrain_pred = lr.predict(xtrain)
mse = mean_squared_error(ytrain, ytrain_pred)
rmse = np.sqrt(mse)
r2 = r2_score(ytrain, ytrain_pred)

print('The Linear Regression model performance for the training set')
print('--------------------------------------------------------')
print('MSE is {}'.format(mse))
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))

from sklearn.ensemble import RandomForestRegressor
rf = RandomForestRegressor()
rf.fit(xtrain,ytrain)

ytrain_pred = rf.predict(xtrain)
mse = mean_squared_error(ytrain, ytrain_pred)
rmse = np.sqrt(mse)
r2 = r2_score(ytrain, ytrain_pred)

print('\nThe RandomForestRegressor model performance for the training set')
print('--------------------------------------------------------')
print('MSE is {}'.format(mse))
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))